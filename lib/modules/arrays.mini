# Arrays util functions

# Range function
export fun range(min, max) {
  if (min > max) { raise("Max must be greater than or equal to min") }
  let ret = []
  for (let mut i = min; i < max; i = i + 1) {
    ret << i 
  }
  return ret
}

export fun concat(arr_a, arr_b) {
  ==/ Concatenate two arrays together /==
  for (el in arr_b) { arr_a << el }
  return arr_a
}

# Return an array with a function applied to each element
export fun map(arr, func) {
  ==/ Map an array through a given function
      arr - The array to map
      func - the function we are mapping over /==
  let ret = []
  for (el in arr) { ret << func(el) }
  return ret
}

export fun each(arr, func) {
  for (el in arr) {
    func(el) 
  }
}

# Filter...func must return a bool
export fun filter(arr, func) {
  let ret = []
  for (el in arr) {
    if (func(el)) { ret << el }
  }
  return ret
}

# reduce(arr, (a, b) => { a + b })
export fun reduce(arr, func) {
  let mut ret = nada 
  if (len(arr) == 0) { nada }
  elseif (len(arr) == 1) { ret = arr[0] }
  else { 
    ret = arr[0]
    for (el in slice(arr, 1, len(arr))) { 
      ret = func(ret, el)
    }
  }
  return ret
}

export fun empty(arr) {
  return len(arr) == 0
}

# Just another way to make a function
let main = () => {
  # Testing map
  let test = [1, 2, 3, 4]  
  let new = map(test, (a) => { a + 1 })
  println(new)

  # Testing range
  println(range(0, 10))

  # Testing filter
  let even = filter(test, (a) => { a % 2 == 0 })
  println(even)

  # Testing reduce
  let sum = reduce(test, (a, b) => { a + b })
  println(sum)
}

# Call the main function if file is not a module
if (__name == "main") {
  main()
}
